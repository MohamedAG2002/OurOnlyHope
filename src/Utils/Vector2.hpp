#pragma once

class Vector2 
{
  // CTORs
  ///////////////////////////////////////////////
  public:
    Vector2(float x, float y)
      :x(x), y(y) 
    {}
    
    // Default constructor
    Vector2()
      :x(0.0f), y(0.0f) 
    {}
  ///////////////////////////////////////////////

  // Public variables
  ///////////////////////////////////////////////
  public:
    float x, y; 
  ///////////////////////////////////////////////

  // Static variables
  ///////////////////////////////////////////////
  public:
    static const Vector2 ZERO;
    static const Vector2 ONE;
  ///////////////////////////////////////////////

  public:
    // Mathematical functions
    ///////////////////////////////////////////////
    void Normalize(); 
    ///////////////////////////////////////////////

    // Operators overloading
    ///////////////////////////////////////////////
    const Vector2& operator=(const Vector2& other); 
    ///////////////////////////////////////////////
    
    ///////////////////////////////////////////////
    bool operator==(const Vector2& other);
    bool operator!=(const Vector2& other);
    ///////////////////////////////////////////////

    ///////////////////////////////////////////////
    Vector2 operator*(const Vector2& other);
    Vector2 operator*(const float f);
    Vector2& operator*=(Vector2 other);
    Vector2& operator*=(float f);
    ///////////////////////////////////////////////

    ///////////////////////////////////////////////
    Vector2 operator+(const Vector2& other);
    Vector2 operator+(float f);
    Vector2& operator+=(Vector2 other);
    Vector2& operator+=(float f);
    ///////////////////////////////////////////////

    ///////////////////////////////////////////////
    Vector2 operator-(const Vector2& other);
    Vector2 operator-(float f);
    Vector2& operator-=(Vector2 other);
    Vector2& operator-=(float f);
    ///////////////////////////////////////////////
};
